version: '3'

services:
  zookeeper:
    container_name: zookeeper
    image: zookeeper
    ports:
      - 2181:2181
    environment:
      - ZOO_LOG4J_PROP=WARN

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka
    ports:
      - 9092:9092
    logging:
      driver: none
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper

  gateway:
    container_name: gateway
    image: node:lts-alpine
    working_dir: /usr/src/app
    volumes:
      - ./gateway/package.json:/usr/src/app/package.json
      - ./gateway/tsconfig.json:/usr/src/app/tsconfig.json
      - ./gateway/src:/usr/src/app/src
      - ./gateway/node_modules:/usr/src/app/node_modules
    env_file: env/.docker-compose.env
    command: node_modules/.bin/ts-node-dev src/main --colors --transpileOnly --debounce 1500
    ports:
      - 3000:3000
    depends_on:
      - authentication

  admin:
    container_name: admin
    image: node:lts-alpine
    working_dir: /usr/src/app
    volumes:
      - ./admin/package.json:/usr/src/app/package.json
      - ./admin/tsconfig.json:/usr/src/app/tsconfig.json
      - ./admin/src:/usr/src/app/src
      - ./admin/node_modules:/usr/src/app/node_modules
      - ./scripts:/usr/src/app/scripts
    env_file: env/.docker-compose.env
    command:
      [
        './scripts/wait-for-kafka.sh',
        'kafka',
        '9092',
        'node_modules/.bin/ts-node-dev',
        'src/main',
        '--colors',
        '--transpileOnly',
        '--debounce',
        '1500',
      ]
    depends_on:
      - kafka

  authentication:
    container_name: authentication
    image: node:lts-alpine
    working_dir: /usr/src/app
    volumes:
      - ./authentication/package.json:/usr/src/app/package.json
      - ./authentication/tsconfig.json:/usr/src/app/tsconfig.json
      - ./authentication/src:/usr/src/app/src
      - ./authentication/node_modules:/usr/src/app/node_modules
      - ./scripts:/usr/src/app/scripts
    env_file: env/.docker-compose.env
    command:
      [
        './scripts/wait-for-kafka.sh',
        'kafka',
        '9092',
        'node_modules/.bin/ts-node-dev',
        'src/main',
        '--colors',
        '--transpileOnly',
        '--debounce',
        '1500',
      ]
    # command: ["./wait-for-it.sh", "db:5432", "--", "node", "index.js"]
    depends_on:
      - kafka
      - authentication-database
  authentication-database:
    container_name: authentication-database
    image: postgres
    restart: always
    ports:
      - '54320:5432'
    volumes:
      - ./authentication/database/install-extensions.sql:/docker-entrypoint-initdb.d/1-install-extensions.sql
      - ./authentication/database/setup.sql:/docker-entrypoint-initdb.d/2-setup.sql
      - ./authentication/database/events-data.sql:/docker-entrypoint-initdb.d/3-events-data.sql
      #- ./server_db/authentication:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${AUTHENTICATION_DATABASE_USER}
      - POSTGRES_PASSWORD=${AUTHENTICATION_DATABASE_PASSWORD}
      - POSTGRES_DB=${AUTHENTICATION_DATABASE_NAME}

  user:
    container_name: user
    image: node:lts-alpine
    working_dir: /usr/src/app
    volumes:
      - ./user/package.json:/usr/src/app/package.json
      - ./user/tsconfig.json:/usr/src/app/tsconfig.json
      - ./user/src:/usr/src/app/src
      - ./user/node_modules:/usr/src/app/node_modules
      - ./scripts:/usr/src/app/scripts
    env_file: env/.docker-compose.env
    command:
      [
        './scripts/wait-for-kafka.sh',
        'kafka',
        '9092',
        'node_modules/.bin/ts-node-dev',
        'src/main',
        '--colors',
        '--transpileOnly',
        '--debounce',
        '1500',
      ]
    depends_on:
      - kafka
      - admin
      - authentication
